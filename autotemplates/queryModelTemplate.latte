<?php

/**
 * This is the base model class for the database table '{$tablename}'
 *
 * Do not modify this file, it is overwritten via the granadabuilder script
 */

namespace {$namespace};

/**
 *
 * @method string[] find_pairs_representation(integer $limit) List of items in an array using the representation string
 * @method array find_pairs(string|null $key, string|null $value) Gets data in array form, as pairs of data for each row in the results. The key and value are the database column to use as the array keys and values
 * @method boolean delete_many() Delete all matching records
 * @method integer count(string $column) Get the count of the column
 * @method string max(string $column) Will return the max value of the chosen column.
 * @method string min(string $column) Will return the min value of the chosen column.
 * @method string avg(string $column) Will return the average value of the chosen column.
 * @method string sum(string $column) Will return the sum of the values of the chosen column.
 * @method \{$namespace}\{$modelname} find_one(integer $id) Find one matching record. If $id is set, get the pk record
 * @method \{$namespace}\{$modelname}[] find_many() Find all matching records
 * @method \{$namespace}\Query{$modelname} raw_query(string $query, array $parameters) Perform a raw query. The query can contain placeholders in either named or question mark style. If placeholders are used, the parameters should be an array of values which will be bound to the placeholders in the query. If this method is called, all other query building methods will be ignored.
 * @method \{$namespace}\Query{$modelname} table_alias(string $alias) Add an alias for the main table to be used in SELECT queries
 * @method \{$namespace}\Query{$modelname} select(string $column, string $alias) Add a column to the list of columns returned by the SELECT query. This defaults to '*'. The second optional argument is the alias to return the column as.
 * @method \{$namespace}\Query{$modelname} select_expr(string $expr, string $alias) Add an unquoted expression to the list of columns returned by the SELECT query. The second optional argument is the alias to return the column as.
 * @method \{$namespace}\Query{$modelname} distinct() Add a DISTINCT keyword before the list of columns in the SELECT query
 * @method \{$namespace}\Query{$modelname} join(string $table, string $constraint, string $table_alias) Add a simple JOIN source to the query
 * @method \{$namespace}\Query{$modelname} inner_join(string $table, string[] $constraint, string) Add an INNER JOIN source to the query
 * @method \{$namespace}\Query{$modelname} left_outer_join(string $table, string[] $constraint, string $table_alias) Add a LEFT OUTER JOIN source to the query
 * @method \{$namespace}\Query{$modelname} limit(integer $number)Add a LiMiT to the query
 * @method \{$namespace}\Query{$modelname} offset(integer $offset) Add an OFFSET to the query
 * @method \{$namespace}\Query{$modelname} group_by(string $column_name) Add a column to the list of columns to GROUP BY
 * @method \{$namespace}\Query{$modelname} group_by_expr(string $expr) Add an unquoted expression to the list of columns to GROUP BY
 * @method \{$namespace}\Query{$modelname} having(string $column_name, string $value) Add a HAVING column = value clause to your query. Each time this is called in the chain, an additional HAVING will be added, and these will be ANDed together when the final query is built.
 * @method \{$namespace}\Query{$modelname} having_equal(string $column_name, string $value) More explicitly named version of for the having() method. Can be used if preferred.
 * @method \{$namespace}\Query{$modelname} having_not_equal(string $column_name, string $value) Add a HAVING column != value clause to your query.
 * @method \{$namespace}\Query{$modelname} having_id_is(integer $id) Special method to query the table by its primary key
 * @method \{$namespace}\Query{$modelname} having_like(string $column_name, string $value) Add a HAVING ... LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} having_not_like(string $column_name, string $value) Add where HAVING ... NOT LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} having_gt(string $column_name, integer $value) Add a HAVING ... > clause to your query
 * @method \{$namespace}\Query{$modelname} having_lt(string $column_name, string $value) Add a HAVING ... < clause to your query
 * @method \{$namespace}\Query{$modelname} having_gte(string $column_name, string $value) Add a HAVING ... >= clause to your query
 * @method \{$namespace}\Query{$modelname} having_lte(string $column_name, string $value) Add a HAVING ... <= clause to your query
 * @method \{$namespace}\Query{$modelname} having_in(string $column_name, string[] $values) Add a HAVING ... IN clause to your query
 * @method \{$namespace}\Query{$modelname} having_not_in(string $column_name, string[] $values) Add a HAVING ... NOT IN clause to your query
 * @method \{$namespace}\Query{$modelname} having_null(string $column_name) Add a HAVING column IS NULL clause to your query
 * @method \{$namespace}\Query{$modelname} having_not_null(string $column_name) Add a HAVING column IS NOT NULL clause to your query
 * @method \{$namespace}\Query{$modelname} having_raw(string $clause, string[] $parameters) Add a raw HAVING clause to the query. The clause should contain question mark placeholders, which will be bound to the parameters supplied in the second argument.
{foreach $structure as $field}
{if $field->type == 'dob' or $field->type == 'date' or $field->type == 'datetime' }
 * @method \{$namespace}\Query{$modelname} where_{$field->name}({$chronosModel} $value) Add a WHERE {$field->name} = clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_not_equal({$chronosModel} $value) Add a WHERE {$field->name} != clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gt({$chronosModel} $value) Add a WHERE {$field->name} > clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lt({$chronosModel} $value) Add a WHERE {$field->name} < clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gte({$chronosModel} $value) Add a WHERE {$field->name} >= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lte({$chronosModel} $value) Add a WHERE {$field->name} <= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gt_or_null({$chronosModel} $value) Add a WHERE {$field->name} > clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lt_or_null({$chronosModel} $value) Add a WHERE {$field->name} < clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gte_or_null({$chronosModel} $value) Add a WHERE {$field->name} >= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lte_or_null({$chronosModel} $value) Add a WHERE {$field->name} <= clause to your query
{else}
 * @method \{$namespace}\Query{$modelname} where_{$field->name}(string $value) Add a WHERE {$field->name} = clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_not_equal(string $value) Add a WHERE {$field->name} != clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_like(string $value) Add a WHERE {$field->name} LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_not_like(string $value) Add where WHERE {$field->name} NOT LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gt(string $value) Add a WHERE {$field->name} > clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lt(string $value) Add a WHERE {$field->name} < clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gte(string $value) Add a WHERE {$field->name} >= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lte(string $value) Add a WHERE {$field->name} <= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gt_or_null(string $value) Add a WHERE {$field->name} > clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lt_or_null(string $value) Add a WHERE {$field->name} < clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_gte_or_null(string $value) Add a WHERE {$field->name} >= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_lte_or_null(string $value) Add a WHERE {$field->name} <= clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_in(string $values) Add a WHERE {$field->name} IN clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_not_in(string[] $values) Add a WHERE {$field->name} NOT IN clause to your query
{/if}
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_null() Add a WHERE {$field->name} IS NULL clause to your query
 * @method \{$namespace}\Query{$modelname} where_{$field->name}_not_null() Add a WHERE {$field->name} IS NOT NULL clause to your query
{/foreach}
{if false}
 * @method \{$namespace}\Query{$modelname} where(string $field, string $value) Search a field for a value to be equal
 * @method \{$namespace}\Query{$modelname} where_any_is(string $values, string $operator='=') Allows adding a WHERE clause that matches any of the conditions specified in the array. Each element in the associative array will be a different condition, where the key will be the column name. By default, an equal operator will be used against all columns, but it can be overriden for any or every column using the second parameter. Each condition will be ORed together when added to the final query. See QueryBuilderTest.php file for good examples
 * @method \{$namespace}\Query{$modelname} where_equal(string $column_name, string $value) More explicitly named version of for the where() method. Can be used if preferred.
 * @method \{$namespace}\Query{$modelname} where_not_equal(string $column_name, string $value) Add a WHERE column != value clause to your query.
 * @method \{$namespace}\Query{$modelname} where_like(string $column_name, string $value) Add a WHERE ... LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} where_not_like(string $column_name, string $value) Add where WHERE ... NOT LIKE clause to your query.
 * @method \{$namespace}\Query{$modelname} where_gt(string $column_name, string $value) Add a WHERE ... > clause to your query
 * @method \{$namespace}\Query{$modelname} where_lt(string $column_name, string $value) Add a WHERE ... < clause to your query
 * @method \{$namespace}\Query{$modelname} where_gte(string $column_name, string $value) Add a WHERE ... >= clause to your query
 * @method \{$namespace}\Query{$modelname} where_lte(string $column_name, string $value) Add a WHERE ... <= clause to your query
 * @method \{$namespace}\Query{$modelname} where_in(string $column_name, string $values) Add a WHERE ... IN clause to your query
 * @method \{$namespace}\Query{$modelname} where_not_in(string $column_name, string[] $values) Add a WHERE ... NOT IN clause to your query
 * @method \{$namespace}\Query{$modelname} where_null(string $column_name) Add a WHERE column IS NULL clause to your query
 * @method \{$namespace}\Query{$modelname} where_not_null(string $column_name) Add a WHERE column IS NOT NULL clause to your query
 * @method \{$namespace}\Query{$modelname} where_datetime_gt(string $column_name, {$chronosModel} $value) Add a WHERE ... > clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime_lt(string $column_name, {$chronosModel} $value) Add a WHERE ... < clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime_gte(string $column_name, {$chronosModel} $value) Add a WHERE ... >= clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime_lte(string $column_name, {$chronosModel} $value) Add a WHERE ... <= clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime(string $column_name, {$chronosModel} $value) Add a WHERE ... = clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime_equal(string $column_name, {$chronosModel} $value) Add a WHERE ... = clause to your query, Takes timezone comparison settings into account
 * @method \{$namespace}\Query{$modelname} where_datetime_not_equal(string $column_name, {$chronosModel} $value) Add a WHERE ... != clause to your query, Takes timezone comparison settings into account
{/if}
 * @method \{$namespace}\Query{$modelname} where_raw(string $clause, array $parameters = NULL) Add a raw WHERE clause to the query. The clause should contain question mark placeholders, which will be bound to the parameters supplied in the second argument.
 * @method \{$namespace}\Query{$modelname} with(string $name) Eager-load data from another table
 * @method \{$namespace}\Query{$modelname} defaultFilter() Add a query to get default filter. Use as $items = {$modelname}::model()->defaultFilter()->find_many();
{foreach $structure as $field}
 * @method \{$namespace}\Query{$modelname} order_by_{$field->name}_asc() Add an ORDER BY column ASC clause for {$field->name}
 * @method \{$namespace}\Query{$modelname} order_by_{$field->name}_desc() Add an ORDER BY column DESC clause for {$field->name}
 * @method \{$namespace}\Query{$modelname} order_by_{$field->name}_natural_asc() Add an ORDER BY column ASC clause using natural sorting method for {$field->name}
 * @method \{$namespace}\Query{$modelname} order_by_{$field->name}_natural_desc() Add an ORDER BY column DESC clause using natural sorting method for {$field->name}
{/foreach}
 * @method \{$namespace}\Query{$modelname} order_by_rand() Fetch items in a random order. Use sparingly and ensure a LIMIT is placed
 * @method \{$namespace}\Query{$modelname} order_by_expr(string $clause) Add an unquoted expression as an ORDER BY clause
 * @method \{$namespace}\Query{$modelname} order_by_list(string $column_name, integer[] $list) Add an ORDER BY FIELD column clause to make the ordering a specific sequence
 * @method \{$namespace}\Query{$modelname} onlyif(bool $condition, callable $query) Add a WHERE, ORDER BY or LIMIT clause only if the condition is true
 * @method string get_select_query() Simulate what would be sent to the database server
 */

abstract class Query{$modelname} extends {$modelToExtend} {
}
